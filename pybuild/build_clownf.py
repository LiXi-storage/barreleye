"""
Library for building Clownfish
"""
import os
import traceback
from pybuild import build_common
from pybuild import build_consul
from pycoral import constant
from pycoral import clog
from pycoral import cmd_general
from pyclownf import clownf_constant


CLOWNF_BUILD_DEPENDENT_RPMS = ["golang"]  # Building go codes


class CoralClownfPlugin(build_common.CoralPluginType):
    """
    Clownf Plugin
    """
    # pylint: disable=too-few-public-methods
    def __init__(self):
        packages = [build_consul.CONSUL_PACKAGE_NAME]
        super().__init__("clownf", is_devel=False, need_lustre_rpms=True,
                         packages=packages)

    def cpt_build_dependent_packages(self, distro):
        """
        Return the RPMs needed to install before building
        """
        # pylint: disable=unused-argument,no-self-use
        return CLOWNF_BUILD_DEPENDENT_RPMS

    def cpt_install_build_dependency(self, log, workspace, host,
                                     target_cpu, type_cache):
        """
        Install dependency before build
        """
        # pylint: disable=unused-argument,no-self-use
        return 0

    def cpt_build(self, log, workspace, local_host, source_dir, target_cpu,
                  type_cache, iso_cache, packages_dir, extra_iso_fnames,
                  extra_package_fnames, extra_package_names, option_dict):
        """
        Build the plugin
        """
        # pylint: disable=unused-argument,no-self-use
        # Needed by Clownfish
        extra_package_names += clownf_constant.CLOWNF_DEPENDENT_RPMS
        return 0


def update_golang(log, path):
    """
    Update the go constant file
    """
    head = """// Please DO NOT edit this file directly!
// File is generated by "coral clownf generate_constant" command.
//
// Constant strings that should be synced with codes of different languages.

package main

"""
    try:
        with open(path, 'w', encoding='utf-8') as file_object:
            file_object.write(head)
            file_object.write("const (\n")
            file_object.write("\tCSM_MOUNTABLE = %d\n" %
                              constant.CSM_MOUNTABLE)
            file_object.write("\tCSM_FORCE_REQUIRED = %d\n" %
                              constant.CSM_FORCE_REQUIRED)
            file_object.write("\tCSM_EINVAL = %d\n" % constant.CSM_EINVAL)
            file_object.write("\tCSM_FATAL = %d\n" % constant.CSM_FATAL)
            file_object.write("\tCSM_UNSUPPORTED = %d\n" %
                              constant.CSM_UNSUPPORTED)
            file_object.write("\tCSM_AGAIN = %d\n" % constant.CSM_AGAIN)
            file_object.write("\n")
            file_object.write("\tCLF_CONSUL_SERVICE_PATH = \"%s\"\n" %
                              clownf_constant.CLF_CONSUL_SERVICE_PATH)
            file_object.write("\tCLF_CONSUL_CONFIG_KEY = \"%s\"\n" %
                              clownf_constant.CLF_CONSUL_CONFIG_KEY)
            file_object.write("\tCLF_CONSUL_LOCK_KEY = \"%s\"\n" %
                              clownf_constant.CLF_CONSUL_LOCK_KEY)
            file_object.write("\tCLF_CONSUL_HOST_PATH = \"%s\"\n" %
                              clownf_constant.CLF_CONSUL_HOST_PATH)
            file_object.write("\tCLF_MAX_WATCH_HOST = %d\n" %
                              clownf_constant.CLF_MAX_WATCH_HOST)
            file_object.write("\n")
            file_object.write("\tCLOWNF_CONFIG = \"%s\"\n" %
                              clownf_constant.CLOWNF_CONFIG)
            file_object.write("\tMSG_ALREADY_MOUNTED = \"%s\\n\"\n" %
                              constant.MSG_ALREADY_MOUNTED[:-1])
            file_object.write("\tCLF_MSG_ALREADY_STARTED = \"%s\\n\"\n" %
                              clownf_constant.CLF_MSG_ALREADY_STARTED[:-1])
            file_object.write(")\n")
    except:
        log.cl_error("exception: %s", traceback.format_exc())
        return -1
    return 0


def update_header(log, path):
    """
    Update the C constant file
    """
    head = """/*
 * Please DO NOT edit this file directly!
 * File generated by "coral clownf generate_constant" command
 *
 * Constant strings that should be synced with codes of different languages.
 */
"""
    try:
        with open(path, 'w', encoding='utf-8') as file_object:
            file_object.write(head)
            file_object.write("#ifndef _CLF_CONSTANT_H_\n")
            file_object.write("#define _CLF_CONSTANT_H_\n")
            file_object.write("#define CSM_MOUNTABLE %d\n" %
                              constant.CSM_MOUNTABLE)
            file_object.write("#define CSM_FORCE_REQUIRED %d\n" %
                              constant.CSM_FORCE_REQUIRED)
            file_object.write("#define CSM_EINVAL %d\n" %
                              constant.CSM_EINVAL)
            file_object.write("#define CSM_FATAL %d\n" %
                              constant.CSM_FATAL)
            file_object.write("#define CSM_UNSUPPORTED %d\n" %
                              constant.CSM_UNSUPPORTED)
            file_object.write("#define CSM_AGAIN %d\n" %
                              constant.CSM_AGAIN)
            file_object.write("#define CSM_OCCUPIED %d\n" %
                              constant.CSM_OCCUPIED)
            file_object.write("#endif /* _CLF_CONSTANT_H_ */\n")
    except:
        log.cl_error("exception: %s", traceback.format_exc())
        return -1
    return 0


class CoralClownfCommand():
    """
    Commands for building Clownfish plugin.
    """
    # pylint: disable=too-few-public-methods
    def _init(self, log_to_file):
        # pylint: disable=attribute-defined-outside-init
        self._ccc_log_to_file = log_to_file

    def generate_constant(self, path):
        """
        Generate constant source files for Clownfish plugin.

        :param path: File path of the constant file. If this path ends with
            ".h", generate C header file. If this patch ends with ".go",
            generate Go file.
        """
        # pylint: disable=no-self-use
        log = clog.get_log(console_format=clog.FMT_NORMAL, overwrite=True)
        if path.endswith(".go"):
            rc = update_golang(log, path)
        elif path.endswith(".h"):
            rc = update_header(log, path)
        else:
            log.cl_error("path [%s] does not end with neither [.go] nor [.h]",
                         path)
            cmd_general.cmd_exit(log, -1)

        if rc:
            os.unlink(path)
        cmd_general.cmd_exit(log, rc)



build_common.coral_plugin_register(CoralClownfPlugin())
build_common.coral_command_register("clownf", CoralClownfCommand())
