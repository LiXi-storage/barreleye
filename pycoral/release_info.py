"""
Library for release info file.
"""
from pycoral import coral_yaml
from pycoral import constant

RELEASE_INFO_VERSION = "version"
RELEASE_INFO_DISTRO_SHORT = "distro_short"
RELEASE_INFO_TARGET_CPU = "target_cpu"


class ReleaseInfo():
    """
    This instance saves the release information of Lustre/Coral/Other software
    """
    # pylint: disable=too-many-instance-attributes
    def __init__(self):
        # Short SHA of git
        self.rli_git_short_sha = None
        # Versio printed by "./coral version show"
        self.rli_version = None
        # Short distro, e.g. el7 or el8
        self.rli_distro_short = None
        # Target CPU, e.g. x86_64
        self.rli_target_cpu = None

    def rli_read_from_file(self, log, fpath):
        """
        Read the info file.
        """
        # pylint: disable=too-many-branches,too-many-statements
        info = coral_yaml.read_yaml_file(log, fpath)
        if info is None:
            log.cl_error("failed to read release info file [%s]",
                         fpath)
            return -1
        if RELEASE_INFO_VERSION not in info:
            log.cl_warning("no field [%s] in release info file [%s]",
                           RELEASE_INFO_VERSION, fpath)
        else:
            value = info[RELEASE_INFO_VERSION]
            if value is not None:
                if self.rli_version is None:
                    self.rli_version = value
                elif self.rli_version != value:
                    log.cl_error("inconsistent old and new values of field [%s], [%s] vs. [%s]",
                                 RELEASE_INFO_VERSION,
                                 self.rli_version,
                                 value)
                    return -1

        if RELEASE_INFO_DISTRO_SHORT not in info:
            log.cl_warning("no field [%s] in release info file [%s]",
                           RELEASE_INFO_DISTRO_SHORT, fpath)
        else:
            value = info[RELEASE_INFO_DISTRO_SHORT]
            if value is not None:
                if self.rli_distro_short is None:
                    self.rli_distro_short = value
                elif self.rli_distro_short != value:
                    log.cl_error("inconsistent old and new values of field [%s], [%s] vs. [%s]",
                                 RELEASE_INFO_DISTRO_SHORT,
                                 self.rli_distro_short,
                                 value)
                    return -1

        if RELEASE_INFO_TARGET_CPU not in info:
            log.cl_warning("no field [%s] in release info file [%s]",
                           RELEASE_INFO_TARGET_CPU, fpath)
        else:
            value = info[RELEASE_INFO_TARGET_CPU]
            if value is not None:
                if self.rli_target_cpu is None:
                    self.rli_target_cpu = value
                elif self.rli_target_cpu != value:
                    log.cl_error("inconsistent old and new values of field [%s], [%s] vs. [%s]",
                                 RELEASE_INFO_TARGET_CPU,
                                 self.rli_distro_short,
                                 value)
                    return -1
        return 0


    def rli_info_dict(self):
        """
        Return dict of release info.
        """
        info_dict = {
            RELEASE_INFO_VERSION: self.rli_version,
            RELEASE_INFO_DISTRO_SHORT: self.rli_distro_short,
            RELEASE_INFO_TARGET_CPU: self.rli_target_cpu,
        }
        return info_dict

    def rli_save_to_file(self, log, fpath):
        """
        Save release info to a file.
        """
        info_dict = self.rli_info_dict()
        prefix = """#
# Please DO NOT edit this file directly!
# Release information saved by Coral.
#
"""
        ret = coral_yaml.write_yaml_file(log, prefix, info_dict, fpath)
        if ret:
            log.cl_error("failed to save YAML file of release information")
            return -1
        return 0

    def rli_release_name(self, log):
        """
        Return release name from release info
        """
        if self.rli_version is not None:
            return self.rli_version
        if self.rli_git_short_sha is None:
            log.cl_error("git short SHA is not inited")
            return None
        git_identity = "git_" + self.rli_git_short_sha
        return git_identity


def read_release_info_from_file(log, info_fpath):
    """
    Read the info file
    """
    release_info = ReleaseInfo()
    ret = release_info.rli_read_from_file(log, info_fpath)
    if ret:
        log.cl_error("failed to parse release info file")
        return None
    return release_info


def read_release_name_from_info_file(log, info_fpath):
    """
    Read the info file and return release name
    """
    release_info = read_release_info_from_file(log, info_fpath)
    if release_info is None:
        log.cl_error("failed to read release info file")
        return None
    return release_info.rli_release_name(log)


def get_release_info_from_iso_file(log, local_host, iso_path, tmp_dir):
    """
    Get Coral version and CPU arch from ISO file. Return ReleaseInfo.
    """
    command = ("mkdir -p %s" % (tmp_dir))
    retval = local_host.sh_run(log, command)
    if retval.cr_exit_status:
        log.cl_error("failed to run command [%s] on local host [%s], "
                     "ret = [%d], stdout = [%s], stderr = [%s]",
                     command,
                     local_host.sh_hostname,
                     retval.cr_exit_status,
                     retval.cr_stdout,
                     retval.cr_stderr)
        return None

    command = ("7z x %s -o%s -i'!%s' -y" %
               (iso_path, tmp_dir,
                constant.CORAL_RELEASE_INFO_FNAME))
    retval = local_host.sh_run(log, command)
    if retval.cr_exit_status:
        log.cl_error("failed to run command [%s] on local host [%s], "
                     "ret = [%d], stdout = [%s], stderr = [%s]",
                     command,
                     local_host.sh_hostname,
                     retval.cr_exit_status,
                     retval.cr_stdout,
                     retval.cr_stderr)
        return None

    fpath = tmp_dir + "/" + constant.CORAL_RELEASE_INFO_FNAME
    rinfo = read_release_info_from_file(log, fpath)
    if rinfo is None:
        log.cl_error("failed to read release info [%s] on host [%s]",
                     fpath, local_host.sh_hostname)
        return None
    return rinfo
