"""
Commands to manage pip mirror.

DO NOT import any library that needs extra python package,
since this might cause failure of commands that uses this
library to install python packages.
"""
import os
import traceback

PIP_MIRROR_TSINGHUA = "tsinghua"
PIP_MIRROR_ALIYUN = "aliyun"
PIP_MIRROR_DICT = {}
PIP_CONFIG_DIR = "~/.config/pip"
PIP_CONFIG_FNAME = "pip.conf"
PIP_CONFIG_FPATH = PIP_CONFIG_DIR + "/" + PIP_CONFIG_FNAME
PIP_BACKUP_REFIX = "coral."


def pip_backup_config(log, host):
    """
    Backup the current pip config
    """
    tmp_identity = host.sh_get_identity(log)
    if tmp_identity is None:
        return -1
    identity = PIP_BACKUP_REFIX + tmp_identity
    backup_dir = PIP_CONFIG_DIR + "/" + identity

    exists = host.sh_path_exists(log, PIP_CONFIG_FPATH)
    if exists < 0:
        log.cl_error("failed to check whether [%s] exists",
                     PIP_CONFIG_FPATH)
        return -1
    if exists == 0:
        return 0

    command = "mkdir -p %s" % backup_dir
    retval = host.sh_run(log, command)
    if retval.cr_exit_status:
        log.cl_error("failed to run command [%s] on host [%s], "
                     "ret = [%d], stdout = [%s], stderr = [%s]",
                     command,
                     host.sh_hostname,
                     retval.cr_exit_status,
                     retval.cr_stdout,
                     retval.cr_stderr)
        return -1
    command = "mv %s %s" % (PIP_CONFIG_FPATH, backup_dir)
    retval = host.sh_run(log, command)
    if retval.cr_exit_status:
        log.cl_error("failed to run command [%s] on host [%s], "
                     "ret = [%d], stdout = [%s], stderr = [%s]",
                     command,
                     host.sh_hostname,
                     retval.cr_exit_status,
                     retval.cr_stdout,
                     retval.cr_stderr)
        return -1
    return 0


class PipMirror():
    """
    Each mirror has an object of this type.
    """
    # pylint: disable=too-few-public-methods
    def __init__(self, mirror_name, index_url, tursted_host):
        # Name of the mirror.
        self.pm_mirror_name = mirror_name
        # The index url of the pip
        self.pm_index_url = index_url
        # Trusted host
        self.pm_tursted_host = tursted_host

    def pm_is_configured(self, log, host):
        """
        Check whether this mirror is being used for pip.
        Return -1 on error. Return 1 if yes, 0 if no.
        """
        # pylint: disable=unused-argument
        exists = host.sh_path_exists(log, PIP_CONFIG_FPATH)
        if exists < 0:
            log.cl_error("failed to check whether [%s] exists",
                         PIP_CONFIG_FPATH)
            return -1
        if exists == 0:
            return 0

        for keyword in (self.pm_index_url, self.pm_tursted_host):
            command = "grep %s %s" % (keyword, PIP_CONFIG_FPATH)
            retval = host.sh_run(log, command)
            if retval.cr_exit_status:
                return 0
        return 1

    def pm_configure(self, log, host, workspace):
        """
        Configure the mirror for pip.
        """
        ret = pip_backup_config(log, host)
        if ret:
            log.cl_error("failed to backup pip config")
            return -1

        command = "mkdir -p %s" % PIP_CONFIG_DIR
        retval = host.sh_run(log, command)
        if retval.cr_exit_status:
            log.cl_error("failed to run command [%s] on host [%s], "
                         "ret = [%d], stdout = [%s], stderr = [%s]",
                         command,
                         host.sh_hostname,
                         retval.cr_exit_status,
                         retval.cr_stdout,
                         retval.cr_stderr)
            return -1

        config_fpath = os.path.expanduser(PIP_CONFIG_FPATH)
        config = """
; Pip configuration generated by Coral
[global]
index-url = %s
[install]
trusted-host = %s
""" % (self.pm_index_url, self.pm_tursted_host)
        if host.sh_is_localhost():
            fpath = config_fpath
        else:
            fpath = workspace + "/" + PIP_CONFIG_FNAME
        try:
            with open(fpath, "w", encoding='utf-8') as config_file:
                config_file.write(config)
        except:
            log.cl_error("failed to write file [%s] on local host [%s]: %s",
                         fpath,
                         host.sh_hostname,
                         traceback.format_exc())
            return -1

        if not host.sh_is_localhost():
            ret = host.sh_send_file(log, fpath,
                                    PIP_CONFIG_DIR)
            if ret:
                log.cl_error("failed send file [%s] to dir [%s] on host [%s]",
                             fpath, PIP_CONFIG_DIR,
                             host.sh_hostname)
                return -1
        return 0


class PipTsinghuaMirror(PipMirror):
    """
    Yum mirror of Tsinghua.
    """
    # pylint: disable=too-few-public-methods
    def __init__(self):
        super().__init__(PIP_MIRROR_TSINGHUA,
                         "https://pypi.tuna.tsinghua.edu.cn/simple",
                         "https://pypi.tuna.tsinghua.edu.cn")

PIP_MIRROR_DICT[PIP_MIRROR_TSINGHUA] = PipTsinghuaMirror()


class PipAliyunMirror(PipMirror):
    """
    Yum mirror of Aliyun.
    """
    # pylint: disable=too-few-public-methods
    def __init__(self):
        super().__init__(PIP_MIRROR_ALIYUN,
                         "https://mirrors.aliyun.com/pypi/simple",
                         "https://mirrors.aliyun.com")

PIP_MIRROR_DICT[PIP_MIRROR_ALIYUN] = PipAliyunMirror()


def pip_mirror_configure(log, host, workspace, mirror_name=PIP_MIRROR_TSINGHUA,
                         force=False):
    """
    Set the pip mirror.
    """
    if mirror_name not in PIP_MIRROR_DICT:
        log.cl_error("unsupported pip mirror [%s]", mirror_name)
        return -1
    mirror = PIP_MIRROR_DICT[mirror_name]

    if not force:
        ret = mirror.pm_is_configured(log, host)
        if ret < 0:
            log.cl_error("failed to check whether pip mirror [%s] is configured",
                         mirror_name)
            return -1
        if ret:
            log.cl_info("pip mirror [%s] has already been configured "
                        "on host [%s], skipping",
                        mirror_name, host.sh_hostname)
            return 0

    log.cl_info("configuring pip mirror [%s] on host [%s]",
                mirror_name, host.sh_hostname)
    ret = mirror.pm_configure(log, host, workspace)
    if ret:
        log.cl_error("failed to configure pip")
        return -1

    ret = mirror.pm_is_configured(log, host)
    if ret < 0:
        log.cl_error("failed to check whether pip mirror [%s] is configured",
                     mirror_name)
        return -1
    if ret:
        return 0
    log.cl_error("attemption to configure pip mirror [%s] on host [%s] failed",
                 mirror_name, host.sh_hostname)
    return -1
